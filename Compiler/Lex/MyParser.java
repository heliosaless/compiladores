/* MyParser.java */
/* Generated By:JavaCC: Do not edit this line. MyParser.java */
package Lex;
import Semantic.SyntaxTree.*;

public class MyParser implements MyParserConstants {
  public static void main(String args[]) throws ParseException {
    MyParser parser = new MyParser(System.in);
    parser.Goal();
  }

  static final public Program Goal() throws ParseException {MainClass main;
  ClassDecl cd;
  ClassDeclList cdl = new ClassDeclList();
    main = MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASS:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      cd = ClassDeclaration();
cdl.addElement(cd);
    }
    jj_consume_token(0);
{if ("" != null) return new Program(main, cdl);}
    throw new Error("Missing return statement in function");
}

  static final public MainClass MainClass() throws ParseException {Identifier a;
  Identifier b;
  Statement stm;
    jj_consume_token(CLASS);
    a = Identifier();
    jj_consume_token(LCURLYBRACKET);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPARENTHESIS);
    jj_consume_token(STRING);
    jj_consume_token(LSQUAREBRACKET);
    jj_consume_token(RSQUAREBRACKET);
    b = Identifier();
    jj_consume_token(RPARENTHESIS);
    jj_consume_token(LCURLYBRACKET);
    stm = Statement();
    jj_consume_token(RCURLYBRACKET);
    jj_consume_token(RCURLYBRACKET);
{if ("" != null) return new MainClass(a,b,stm);}
    throw new Error("Missing return statement in function");
}

  static final public ClassDecl ClassDeclaration() throws ParseException {Identifier a;
  Identifier b;
  VarDecl var;
  MethodDecl method;
  VarDeclList varlist = new VarDeclList();
  MethodDeclList methodlist = new MethodDeclList();
    if (jj_2_1(3)) {
      jj_consume_token(CLASS);
      a = Identifier();
      jj_consume_token(LCURLYBRACKET);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case BOOLEAN:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        var = VarDeclaration();
varlist.addElement(var);
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        method = MethodDeclaration();
methodlist.addElement(method);
      }
      jj_consume_token(RCURLYBRACKET);
{if ("" != null) return new ClassDeclSimple(a, varlist, methodlist);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASS:{
        jj_consume_token(CLASS);
        a = Identifier();
        jj_consume_token(EXTENDS);
        b = Identifier();
        jj_consume_token(LCURLYBRACKET);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INT:
          case BOOLEAN:
          case IDENTIFIER:{
            ;
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            break label_4;
          }
          var = VarDeclaration();
varlist.addElement(var);
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PUBLIC:{
            ;
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            break label_5;
          }
          method = MethodDeclaration();
methodlist.addElement(method);
        }
        jj_consume_token(RCURLYBRACKET);
{if ("" != null) return new ClassDeclExtends(a, b, varlist, methodlist);}
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public VarDecl VarDeclaration() throws ParseException {Type at;
  Identifier ai;
    at = Type();
    ai = Identifier();
    jj_consume_token(SEMICOLON);
{if ("" != null) return new VarDecl(at, ai);}
    throw new Error("Missing return statement in function");
}

  static final public MethodDecl MethodDeclaration() throws ParseException {Type at;
  Identifier ai;
  FormalList afl = new FormalList();
  VarDeclList avl = new VarDeclList();
  StatementList asl = new StatementList();
  Exp ae;
  Type at2;
  Identifier ai2;
  Type at3;
  Identifier ai3;
  VarDecl av;
  Statement stm;
    jj_consume_token(PUBLIC);
    at = Type();
    ai = Identifier();
    jj_consume_token(LPARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOLEAN:
    case IDENTIFIER:{
      at2 = Type();
      ai2 = Identifier();
afl.addElement(new Formal(at2, ai2));
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        at3 = Type();
        ai3 = Identifier();
afl.addElement(new Formal(at3, ai3));
      }
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(RPARENTHESIS);
    jj_consume_token(LCURLYBRACKET);
    label_7:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_7;
      }
      av = VarDeclaration();
avl.addElement(av);
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LCURLYBRACKET:
      case IF:
      case WHILE:
      case PRINTLN:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_8;
      }
      stm = Statement();
asl.addElement(stm);
    }
    jj_consume_token(RETURN);
    ae = Expression();
    jj_consume_token(SEMICOLON);
    jj_consume_token(RCURLYBRACKET);
{if ("" != null) return new MethodDecl(at, ai, afl, avl, asl, ae);}
    throw new Error("Missing return statement in function");
}

  static final public Type Type() throws ParseException {Identifier id1;
    if (jj_2_3(2)) {
      jj_consume_token(INT);
      jj_consume_token(LSQUAREBRACKET);
      jj_consume_token(RSQUAREBRACKET);
{if ("" != null) return new IntArrayType();}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
{if ("" != null) return new BooleanType();}
        break;
        }
      case INT:{
        jj_consume_token(INT);
{if ("" != null) return new IntegerType();}
        break;
        }
      case IDENTIFIER:{
        id1 = Identifier();
{if ("" != null) return new IdentifierType(id1.toString());}
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public Identifier Identifier() throws ParseException {Token id;
    id = jj_consume_token(IDENTIFIER);
{if ("" != null) return new Identifier(id.image);}
    throw new Error("Missing return statement in function");
}

  static final public Statement Statement() throws ParseException {Statement stm1;
  StatementList stmList = new StatementList();
  Exp exp1;
  Statement stm2;
  Identifier id1;
  Exp exp2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LCURLYBRACKET:{
      jj_consume_token(LCURLYBRACKET);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LCURLYBRACKET:
        case IF:
        case WHILE:
        case PRINTLN:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_9;
        }
        stm1 = Statement();
stmList.addElement(stm1);
      }
      jj_consume_token(RCURLYBRACKET);
{if ("" != null) return new Block(stmList);}
      break;
      }
    case IF:{
      jj_consume_token(IF);
      jj_consume_token(LPARENTHESIS);
      exp1 = Expression();
      jj_consume_token(RPARENTHESIS);
      stm1 = Statement();
      jj_consume_token(ELSE);
      stm2 = Statement();
{if ("" != null) return new If(exp1, stm1, stm2);}
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(LPARENTHESIS);
      exp1 = Expression();
      jj_consume_token(RPARENTHESIS);
      stm1 = Statement();
{if ("" != null) return new While(exp1, stm1);}
      break;
      }
    case PRINTLN:{
      jj_consume_token(PRINTLN);
      jj_consume_token(LPARENTHESIS);
      exp1 = Expression();
      jj_consume_token(RPARENTHESIS);
      jj_consume_token(SEMICOLON);
{if ("" != null) return new Print(exp1);}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_4(2)) {
        id1 = Identifier();
        jj_consume_token(EQUAL);
        exp1 = Expression();
        jj_consume_token(SEMICOLON);
{if ("" != null) return new Assign(id1, exp1);}
      } else if (jj_2_5(2)) {
        id1 = Identifier();
        jj_consume_token(LSQUAREBRACKET);
        exp1 = Expression();
        jj_consume_token(RSQUAREBRACKET);
        jj_consume_token(EQUAL);
        exp2 = Expression();
        jj_consume_token(SEMICOLON);
{if ("" != null) return new ArrayAssign(id1, exp1, exp2);}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public Exp ExpressionPrime(Exp a) throws ParseException {Exp exp1;
  Exp exp2;
  Exp exp3;
  Identifier id1;
  ExpList expList = new ExpList();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
      exp1 = Expression();
      exp2 = ExpressionPrime(new And(a, exp1));
{if ("" != null) return exp2;}
      break;
      }
    case LESSTHAN:{
      jj_consume_token(LESSTHAN);
      exp1 = Expression();
      exp2 = ExpressionPrime(new LessThan(a, exp1));
{if ("" != null) return exp2;}
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
      exp1 = Expression();
      exp2 = ExpressionPrime(new Plus(a, exp1));
{if ("" != null) return exp2;}
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      exp1 = Expression();
      exp2 = ExpressionPrime(new Minus(a, exp1));
{if ("" != null) return exp2;}
      break;
      }
    case MULTIPLY:{
      jj_consume_token(MULTIPLY);
      exp1 = Expression();
      exp2 = ExpressionPrime(new Times(a,exp1));
{if ("" != null) return exp2;}
      break;
      }
    case LSQUAREBRACKET:{
      jj_consume_token(LSQUAREBRACKET);
      exp1 = Expression();
      jj_consume_token(RSQUAREBRACKET);
      exp2 = ExpressionPrime(new ArrayLookup(a, exp1));
{if ("" != null) return exp2;}
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_6(2)) {
        jj_consume_token(DOT);
        jj_consume_token(LENGTH);
        exp1 = ExpressionPrime(new ArrayLength(a));
{if ("" != null) return exp1;}
      } else if (jj_2_7(2)) {
        jj_consume_token(DOT);
        id1 = Identifier();
        jj_consume_token(LPARENTHESIS);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPARENTHESIS:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case NOT:
        case IDENTIFIER:
        case INTEGER_LITERAL:{
          exp1 = Expression();
expList.addElement(exp1);
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[12] = jj_gen;
              break label_10;
            }
            jj_consume_token(COMMA);
            exp2 = Expression();
expList.addElement(exp2);
          }
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(RPARENTHESIS);
        exp3 = ExpressionPrime(new Call(a, id1, expList));
{if ("" != null) return exp3;}
      } else {

{if ("" != null) return a;}
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public Exp Expression() throws ParseException {Token i1;
  String s1;
  String s2;
  Exp exp1;
  Exp exp2;
  Identifier id1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      i1 = jj_consume_token(INTEGER_LITERAL);
      exp1 = ExpressionPrime(new IntegerLiteral(Integer.parseInt(i1.image)));
{if ("" != null) return exp1;}
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      exp1 = ExpressionPrime(new True());
{if ("" != null) return exp1;}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      exp1 = ExpressionPrime(new False());
{if ("" != null) return exp1;}
      break;
      }
    case IDENTIFIER:{
      id1 = Identifier();
      exp1 = ExpressionPrime(new IdentifierExp(id1.toString()));
{if ("" != null) return exp1;}
      break;
      }
    case THIS:{
      jj_consume_token(THIS);
      exp1 = ExpressionPrime(new This());
{if ("" != null) return exp1;}
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_8(2)) {
        jj_consume_token(NEW);
        jj_consume_token(INT);
        jj_consume_token(LSQUAREBRACKET);
        exp1 = Expression();
        jj_consume_token(RSQUAREBRACKET);
        exp2 = ExpressionPrime(new NewArray(exp1));
{if ("" != null) return exp2;}
      } else if (jj_2_9(2)) {
        jj_consume_token(NEW);
        id1 = Identifier();
        jj_consume_token(LPARENTHESIS);
        jj_consume_token(RPARENTHESIS);
        exp1 = ExpressionPrime(new NewObject(id1));
{if ("" != null) return exp1;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          jj_consume_token(NOT);
          exp1 = Expression();
          exp2 = ExpressionPrime(new Not(exp1));
{if ("" != null) return exp2;}
          break;
          }
        case LPARENTHESIS:{
          jj_consume_token(LPARENTHESIS);
          exp1 = Expression();
          jj_consume_token(RPARENTHESIS);
          exp2 = ExpressionPrime(exp1);
{if ("" != null) return exp2;}
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_3R_Type_155_5_16()
 {
    if (jj_3R_Identifier_163_3_11()) return true;
    return false;
  }

  static private boolean jj_3R_Type_154_5_15()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_Type_153_5_14()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_Type_152_3_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_153_5_14()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_154_5_15()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_155_5_16()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_Identifier_163_3_11()) return true;
    if (jj_scan_token(LCURLYBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_Identifier_163_3_11()) return true;
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_VarDeclaration_119_3_12()) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_Identifier_163_3_11()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_Identifier_163_3_11()) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_Identifier_163_3_11()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_VarDeclaration_119_3_12()
 {
    if (jj_3R_Type_152_3_13()) return true;
    if (jj_3R_Identifier_163_3_11()) return true;
    return false;
  }

  static private boolean jj_3R_Identifier_163_3_11()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x80,0x60000,0x100,0x60000,0x100,0x80,0x0,0x60000,0x1a080000,0x60000,0x1a080000,0x1a080000,0x0,0x800000,0xe0002000,0x0,0x800000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x400,0x0,0x400,0x0,0x0,0x10,0x400,0x400,0x400,0x400,0x0,0x10,0xfe0,0x3,0xce0,0x200,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[9];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyParser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MyParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyParser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new MyParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MyParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyParser(MyParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[44];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 17; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 44; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 9; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
